
apiVersion: v1
kind: Pod
metadata:
  name: python-microservice
  namespace: tech.prod #El pod se despliega en el espacio de nombres tech.prod
  labels:
    app: python-microservice
spec:
  securityContext:
    runAsUser: 10000
    runAsGroup: 30000
    fsGroup: 20000
    seccompProfile:
      type: RuntimeDefault
  containers:
  - name: python-microservice-container
    image: python:3.10-alpine@sha256:9998f2f01e8b636366ddd6374fd79df80e40624ae85d378a0c70fa35f58dbdbf
    resources:
      limits:
        memory: "3Gi" #Limita el uso de memoria del contenedor a 3 GB
        cpu: "1"
    ports:
    - containerPort: 80
    env:
    - name: ENV
      value: "production"
    securityContext:
      capabilities:
        drop:
        - ALL
      allowPrivilegeEscalation: false
      runAsUser: 10000
      readOnlyRootFilesystem: true
    livenessProbe:
      httpGet:
        path: /healthz
        port: 80
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /readiness
        port: 80
      initialDelaySeconds: 5
      periodSeconds: 10
    volumeMounts:
    - name: config-volume
      mountPath: /app/config
      readOnly: true
  volumes:
  - name: config-volume
    configMap:
      name: app-config
  automountServiceAccountToken: false
  dnsPolicy: ClusterFirst
  hostNetwork: false
  restartPolicy: Always
  serviceAccountName: default
  nodeSelector: #Selecciona nodos etiquetados con million.com/network: internal-prod
    million.com/network: internal-prod
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy #Define políticas de red para permitir el tráfico dentro del espacio de nombres tech.prod
metadata:
  name: allow-internal
  namespace: tech.prod
spec:
  podSelector:
    matchLabels:
      app: python-microservice
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: other-allowed-app
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: other-allowed-app